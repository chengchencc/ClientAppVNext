/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/operator/finally';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpResponse, HttpResponseBase, HttpErrorResponse } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AppCrudServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getApps(): Observable<AppInfo[]> {
        let url_ = this.baseUrl + "/api/AppCrud/GetApps";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetApps(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetApps(<any>response_);
                } catch (e) {
                    return <Observable<AppInfo[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<AppInfo[]>><any>Observable.throw(response_);
        });
    }

    protected processGetApps(response: HttpResponseBase): Observable<AppInfo[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(AppInfo.fromJS(item));
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<AppInfo[]>(<any>null);
    }
}

@Injectable()
export class ApiServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    appCrudGet(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/AppCrud/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processAppCrudGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppCrudGet(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAppCrudGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @entity (optional) 
     * @return Success
     */
    appCrudPut(id: number, entity: AppInfo | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/AppCrud/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processAppCrudPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppCrudPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAppCrudPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    appCrudDelete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/AppCrud/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processAppCrudDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppCrudDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAppCrudDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @entity (optional) 
     * @return Success
     */
    appCrudPost(entity: AppInfo | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/AppCrud";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(entity);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processAppCrudPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppCrudPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processAppCrudPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    demoGetAll(): Observable<void> {
        let url_ = this.baseUrl + "/api/Demo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processDemoGetAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDemoGetAll(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDemoGetAll(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @value (optional) 
     * @return Success
     */
    demoPost(value: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Demo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processDemoPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDemoPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDemoPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    demoGet(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Demo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processDemoGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDemoGet(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDemoGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @value (optional) 
     * @return Success
     */
    demoPut(id: number, value: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Demo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processDemoPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDemoPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDemoPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    demoDelete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Demo/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processDemoDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDemoDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDemoDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @folderId (optional) 
     * @return Success
     */
    filesGet(folderId: string | null | undefined): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Files/{folderId}?";
        if (folderId !== undefined)
            url_ += "folderId=" + encodeURIComponent("" + folderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processFilesGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFilesGet(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<string[]>><any>Observable.throw(response_);
        });
    }

    protected processFilesGet(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(item);
            }
            return Observable.of(result200);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<string[]>(<any>null);
    }

    /**
     * @file (optional) 
     * @folderId (optional) 
     * @return Success
     */
    filesPost(file: any | null | undefined, folderId: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Files?";
        if (file !== undefined)
            url_ += "file=" + encodeURIComponent("" + file) + "&"; 
        if (folderId !== undefined)
            url_ += "folderId=" + encodeURIComponent("" + folderId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processFilesPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFilesPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processFilesPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @value (optional) 
     * @return Success
     */
    filesPut(id: number, value: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Files/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processFilesPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFilesPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processFilesPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    filesDelete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Files/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processFilesDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFilesDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processFilesDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @id (optional) 
     * @return Success
     */
    userFoldersGet(id: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UserFolders/{id}?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processUserFoldersGet(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserFoldersGet(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUserFoldersGet(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @userFolder (optional) 
     * @return Success
     */
    userFoldersPut(id: string, userFolder: AppUserFolder | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UserFolders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userFolder);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).flatMap((response_ : any) => {
            return this.processUserFoldersPut(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserFoldersPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUserFoldersPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @return Success
     */
    userFoldersDelete(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/UserFolders/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("delete", url_, options_).flatMap((response_ : any) => {
            return this.processUserFoldersDelete(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserFoldersDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUserFoldersDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }

    /**
     * @userFolder (optional) 
     * @return Success
     */
    userFoldersPost(parentId: string, userFolder: AppUserFolder | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UserFolders/{parentId}";
        if (parentId === undefined || parentId === null)
            throw new Error("The parameter 'parentId' must be defined.");
        url_ = url_.replace("{parentId}", encodeURIComponent("" + parentId)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userFolder);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).flatMap((response_ : any) => {
            return this.processUserFoldersPost(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserFoldersPost(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processUserFoldersPost(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class AuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @rememberMe (optional) 
     * @return Success
     */
    login(email: string, password: string, rememberMe: boolean | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Auth/Login?";
        if (email === undefined || email === null)
            throw new Error("The parameter 'email' must be defined and cannot be null.");
        else
            url_ += "Email=" + encodeURIComponent("" + email) + "&"; 
        if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
        else
            url_ += "Password=" + encodeURIComponent("" + password) + "&"; 
        if (rememberMe !== undefined)
            url_ += "RememberMe=" + encodeURIComponent("" + rememberMe) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processLogin(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processLogin(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

@Injectable()
export class DemoServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAll(): Observable<void> {
        let url_ = this.baseUrl + "/api/Demo/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("get", url_, options_).flatMap((response_ : any) => {
            return this.processGetAll(response_);
        }).catch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processGetAll(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return Observable.of<void>(<any>null);
            });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).flatMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Observable.of<void>(<any>null);
    }
}

export class AppInfo implements IAppInfo {
    id: number | undefined;
    name: string | undefined;
    appType: AppInfoAppType | undefined;
    tenantId: number | undefined;
    tenant: Tenant | undefined;
    desc: string | undefined;
    createUserId: string | undefined;
    createTime: moment.Moment | undefined;
    lastModifiedUId: string | undefined;
    lastModifiedTime: moment.Moment | undefined;

    constructor(data?: IAppInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.appType = data["appType"];
            this.tenantId = data["tenantId"];
            this.tenant = data["tenant"] ? Tenant.fromJS(data["tenant"]) : <any>undefined;
            this.desc = data["desc"];
            this.createUserId = data["createUserId"];
            this.createTime = data["createTime"] ? moment(data["createTime"].toString()) : <any>undefined;
            this.lastModifiedUId = data["lastModifiedUId"];
            this.lastModifiedTime = data["lastModifiedTime"] ? moment(data["lastModifiedTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AppInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AppInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["appType"] = this.appType;
        data["tenantId"] = this.tenantId;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        data["desc"] = this.desc;
        data["createUserId"] = this.createUserId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["lastModifiedUId"] = this.lastModifiedUId;
        data["lastModifiedTime"] = this.lastModifiedTime ? this.lastModifiedTime.toISOString() : <any>undefined;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new AppInfo();
        result.init(json);
        return result;
    }
}

export interface IAppInfo {
    id: number | undefined;
    name: string | undefined;
    appType: AppInfoAppType | undefined;
    tenantId: number | undefined;
    tenant: Tenant | undefined;
    desc: string | undefined;
    createUserId: string | undefined;
    createTime: moment.Moment | undefined;
    lastModifiedUId: string | undefined;
    lastModifiedTime: moment.Moment | undefined;
}

export class Tenant implements ITenant {
    id: number | undefined;
    name: string | undefined;
    description: string | undefined;
    isSeparateDataBase: boolean | undefined;
    connectionString: string | undefined;
    createTime: moment.Moment | undefined;
    createUserId: string | undefined;
    lastModifyTime: moment.Moment | undefined;
    lastModifyUserId: string | undefined;

    constructor(data?: ITenant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.description = data["description"];
            this.isSeparateDataBase = data["isSeparateDataBase"];
            this.connectionString = data["connectionString"];
            this.createTime = data["createTime"] ? moment(data["createTime"].toString()) : <any>undefined;
            this.createUserId = data["createUserId"];
            this.lastModifyTime = data["lastModifyTime"] ? moment(data["lastModifyTime"].toString()) : <any>undefined;
            this.lastModifyUserId = data["lastModifyUserId"];
        }
    }

    static fromJS(data: any): Tenant {
        data = typeof data === 'object' ? data : {};
        let result = new Tenant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["isSeparateDataBase"] = this.isSeparateDataBase;
        data["connectionString"] = this.connectionString;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["createUserId"] = this.createUserId;
        data["lastModifyTime"] = this.lastModifyTime ? this.lastModifyTime.toISOString() : <any>undefined;
        data["lastModifyUserId"] = this.lastModifyUserId;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new Tenant();
        result.init(json);
        return result;
    }
}

export interface ITenant {
    id: number | undefined;
    name: string | undefined;
    description: string | undefined;
    isSeparateDataBase: boolean | undefined;
    connectionString: string | undefined;
    createTime: moment.Moment | undefined;
    createUserId: string | undefined;
    lastModifyTime: moment.Moment | undefined;
    lastModifyUserId: string | undefined;
}

export class IFormFile implements IIFormFile {
    contentType: string | undefined;
    contentDisposition: string | undefined;
    headers: { [key: string] : string[]; } | undefined;
    length: number | undefined;
    name: string | undefined;
    fileName: string | undefined;

    constructor(data?: IIFormFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentType = data["contentType"];
            this.contentDisposition = data["contentDisposition"];
            if (data["headers"]) {
                this.headers = {};
                for (let key in data["headers"]) {
                    if (data["headers"].hasOwnProperty(key))
                        this.headers[key] = data["headers"][key];
                }
            }
            this.length = data["length"];
            this.name = data["name"];
            this.fileName = data["fileName"];
        }
    }

    static fromJS(data: any): IFormFile {
        data = typeof data === 'object' ? data : {};
        let result = new IFormFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentType"] = this.contentType;
        data["contentDisposition"] = this.contentDisposition;
        if (this.headers) {
            data["headers"] = {};
            for (let key in this.headers) {
                if (this.headers.hasOwnProperty(key))
                    data["headers"][key] = this.headers[key];
            }
        }
        data["length"] = this.length;
        data["name"] = this.name;
        data["fileName"] = this.fileName;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new IFormFile();
        result.init(json);
        return result;
    }
}

export interface IIFormFile {
    contentType: string | undefined;
    contentDisposition: string | undefined;
    headers: { [key: string] : string[]; } | undefined;
    length: number | undefined;
    name: string | undefined;
    fileName: string | undefined;
}

export class AppUserFolder implements IAppUserFolder {
    userId: string | undefined;
    name: string | undefined;
    size: number | undefined;
    path: string | undefined;
    parentId: string | undefined;
    folders: AppUserFolder[] | undefined;
    files: AppUserFile[] | undefined;
    id: string | undefined;
    appId: number | undefined;
    appInfo: AppInfo | undefined;
    createUserId: string | undefined;
    createTime: moment.Moment | undefined;
    lastModifiedUId: string | undefined;
    lastModifiedTime: moment.Moment | undefined;

    constructor(data?: IAppUserFolder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.name = data["name"];
            this.size = data["size"];
            this.path = data["path"];
            this.parentId = data["parentId"];
            if (data["folders"] && data["folders"].constructor === Array) {
                this.folders = [];
                for (let item of data["folders"])
                    this.folders.push(AppUserFolder.fromJS(item));
            }
            if (data["files"] && data["files"].constructor === Array) {
                this.files = [];
                for (let item of data["files"])
                    this.files.push(AppUserFile.fromJS(item));
            }
            this.id = data["id"];
            this.appId = data["appId"];
            this.appInfo = data["appInfo"] ? AppInfo.fromJS(data["appInfo"]) : <any>undefined;
            this.createUserId = data["createUserId"];
            this.createTime = data["createTime"] ? moment(data["createTime"].toString()) : <any>undefined;
            this.lastModifiedUId = data["lastModifiedUId"];
            this.lastModifiedTime = data["lastModifiedTime"] ? moment(data["lastModifiedTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AppUserFolder {
        data = typeof data === 'object' ? data : {};
        let result = new AppUserFolder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["size"] = this.size;
        data["path"] = this.path;
        data["parentId"] = this.parentId;
        if (this.folders && this.folders.constructor === Array) {
            data["folders"] = [];
            for (let item of this.folders)
                data["folders"].push(item.toJSON());
        }
        if (this.files && this.files.constructor === Array) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        data["id"] = this.id;
        data["appId"] = this.appId;
        data["appInfo"] = this.appInfo ? this.appInfo.toJSON() : <any>undefined;
        data["createUserId"] = this.createUserId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["lastModifiedUId"] = this.lastModifiedUId;
        data["lastModifiedTime"] = this.lastModifiedTime ? this.lastModifiedTime.toISOString() : <any>undefined;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new AppUserFolder();
        result.init(json);
        return result;
    }
}

export interface IAppUserFolder {
    userId: string | undefined;
    name: string | undefined;
    size: number | undefined;
    path: string | undefined;
    parentId: string | undefined;
    folders: AppUserFolder[] | undefined;
    files: AppUserFile[] | undefined;
    id: string | undefined;
    appId: number | undefined;
    appInfo: AppInfo | undefined;
    createUserId: string | undefined;
    createTime: moment.Moment | undefined;
    lastModifiedUId: string | undefined;
    lastModifiedTime: moment.Moment | undefined;
}

export class AppUserFile implements IAppUserFile {
    folder: AppUserFolder | undefined;
    folderId: string | undefined;
    userId: string | undefined;
    name: string | undefined;
    appFile: AppFile | undefined;
    id: string | undefined;
    appId: number | undefined;
    appInfo: AppInfo | undefined;
    createUserId: string | undefined;
    createTime: moment.Moment | undefined;
    lastModifiedUId: string | undefined;
    lastModifiedTime: moment.Moment | undefined;

    constructor(data?: IAppUserFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.folder = data["folder"] ? AppUserFolder.fromJS(data["folder"]) : <any>undefined;
            this.folderId = data["folderId"];
            this.userId = data["userId"];
            this.name = data["name"];
            this.appFile = data["appFile"] ? AppFile.fromJS(data["appFile"]) : <any>undefined;
            this.id = data["id"];
            this.appId = data["appId"];
            this.appInfo = data["appInfo"] ? AppInfo.fromJS(data["appInfo"]) : <any>undefined;
            this.createUserId = data["createUserId"];
            this.createTime = data["createTime"] ? moment(data["createTime"].toString()) : <any>undefined;
            this.lastModifiedUId = data["lastModifiedUId"];
            this.lastModifiedTime = data["lastModifiedTime"] ? moment(data["lastModifiedTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AppUserFile {
        data = typeof data === 'object' ? data : {};
        let result = new AppUserFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["folder"] = this.folder ? this.folder.toJSON() : <any>undefined;
        data["folderId"] = this.folderId;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["appFile"] = this.appFile ? this.appFile.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["appId"] = this.appId;
        data["appInfo"] = this.appInfo ? this.appInfo.toJSON() : <any>undefined;
        data["createUserId"] = this.createUserId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["lastModifiedUId"] = this.lastModifiedUId;
        data["lastModifiedTime"] = this.lastModifiedTime ? this.lastModifiedTime.toISOString() : <any>undefined;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new AppUserFile();
        result.init(json);
        return result;
    }
}

export interface IAppUserFile {
    folder: AppUserFolder | undefined;
    folderId: string | undefined;
    userId: string | undefined;
    name: string | undefined;
    appFile: AppFile | undefined;
    id: string | undefined;
    appId: number | undefined;
    appInfo: AppInfo | undefined;
    createUserId: string | undefined;
    createTime: moment.Moment | undefined;
    lastModifiedUId: string | undefined;
    lastModifiedTime: moment.Moment | undefined;
}

export class AppFile implements IAppFile {
    name: string | undefined;
    originalName: string | undefined;
    size: number | undefined;
    path: string | undefined;
    extensionName: string | undefined;
    contentType: string | undefined;
    linkedCount: number | undefined;
    mD5: string | undefined;
    shA1: string | undefined;
    crC32: string | undefined;
    id: string | undefined;
    appId: number | undefined;
    appInfo: AppInfo | undefined;
    createUserId: string | undefined;
    createTime: moment.Moment | undefined;
    lastModifiedUId: string | undefined;
    lastModifiedTime: moment.Moment | undefined;

    constructor(data?: IAppFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.originalName = data["originalName"];
            this.size = data["size"];
            this.path = data["path"];
            this.extensionName = data["extensionName"];
            this.contentType = data["contentType"];
            this.linkedCount = data["linkedCount"];
            this.mD5 = data["mD5"];
            this.shA1 = data["shA1"];
            this.crC32 = data["crC32"];
            this.id = data["id"];
            this.appId = data["appId"];
            this.appInfo = data["appInfo"] ? AppInfo.fromJS(data["appInfo"]) : <any>undefined;
            this.createUserId = data["createUserId"];
            this.createTime = data["createTime"] ? moment(data["createTime"].toString()) : <any>undefined;
            this.lastModifiedUId = data["lastModifiedUId"];
            this.lastModifiedTime = data["lastModifiedTime"] ? moment(data["lastModifiedTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AppFile {
        data = typeof data === 'object' ? data : {};
        let result = new AppFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["originalName"] = this.originalName;
        data["size"] = this.size;
        data["path"] = this.path;
        data["extensionName"] = this.extensionName;
        data["contentType"] = this.contentType;
        data["linkedCount"] = this.linkedCount;
        data["mD5"] = this.mD5;
        data["shA1"] = this.shA1;
        data["crC32"] = this.crC32;
        data["id"] = this.id;
        data["appId"] = this.appId;
        data["appInfo"] = this.appInfo ? this.appInfo.toJSON() : <any>undefined;
        data["createUserId"] = this.createUserId;
        data["createTime"] = this.createTime ? this.createTime.toISOString() : <any>undefined;
        data["lastModifiedUId"] = this.lastModifiedUId;
        data["lastModifiedTime"] = this.lastModifiedTime ? this.lastModifiedTime.toISOString() : <any>undefined;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new AppFile();
        result.init(json);
        return result;
    }
}

export interface IAppFile {
    name: string | undefined;
    originalName: string | undefined;
    size: number | undefined;
    path: string | undefined;
    extensionName: string | undefined;
    contentType: string | undefined;
    linkedCount: number | undefined;
    mD5: string | undefined;
    shA1: string | undefined;
    crC32: string | undefined;
    id: string | undefined;
    appId: number | undefined;
    appInfo: AppInfo | undefined;
    createUserId: string | undefined;
    createTime: moment.Moment | undefined;
    lastModifiedUId: string | undefined;
    lastModifiedTime: moment.Moment | undefined;
}

export enum AppInfoAppType {
    _0 = 0, 
    _1 = 1, 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}